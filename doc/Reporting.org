#+STARTUP: showall

* Findings
** Introduction 

** Related Work

** Bibliography
*** Articles
- Experimental methodologies for large-scale systems: a survey 
- Grid'5000: a large scale and highly reconfigurable experimental grid testbed
- Design and Evaluation of a Virtual Experimental Environment for Distributed
  Systems 
- Emulation at Very Large Scale with Distem 
- Simgrid: A toolkit for the simulation of application scheduling
- SimGrid: a Generic Framework for Large-Scale Distributed Experiments
- Émulation d'applications distribuées sur des plates-formes virtuelles simulées 
- Ptrace, utrace, uprobes: Lightweight, dynamic tracing of user apps
- Valgrind: A Framework for Heavyweight Dynamic Binary Instrumentation
- The BSD packet filter: A new architecture for user-level packet capture
- Methods for Emulation of Multi-Core CPU Performance
- Wrekavoc: a tool for emulating heterogeneity 
- Single node on-line simulation of mpi applications with smpi
- Virtual extensible local area network (VXLAN):
  A framework for overlaying virtualized layer 2 networks over layer 3 networks 
- The microgrid: a scientific tool for modeling computational grids 
- The microgrid: Using emulation to predict application performance in diverse grid
  network environments 
- TimeKeeper: a lightweight virtual time system for linux
- Integrated simulation and emulation using adaptive time dilation
- The DETER Project
- The science of cyber security experimentation: the DETER project
- A DETER Federation Architecture
- An Integrated Experimental Environment for Distributed Systems and Networks
*** Reports of internships
http://www.loria.fr/~quinson/Research/Students/2014-master-simterpose-slides.pdf
http://www.loria.fr/~quinson/Research/Students/2014-master-simterpose-rapport.pdf
http://www.loria.fr/~quinson/Research/Students/2013-master-simpad-rapport.pdf
http://www.loria.fr/~quinson/Research/Students/2012-master-simterpose-rapport.pdf
http://www.loria.fr/~quinson/Research/Students/2010_guthmuller-rapport.pdf
http://www.loria.fr/~quinson/Research/Students/2010_guthmuller-slides.pdf
*** Website
https://www.kernel.org/doc/Documentation/cgroups/cgroups.txt
http://www.netfilter.org http://www.loria.fr/~quinson/Research/SMP
http://coccinelle.lip6.fr http://valgrind.org/ http://www.dyninst.org/
http://man7.org/linux/man-pages/man2/seccomp.2.html
https://rafalcieslak.wordpress.com/2013/04/02/dynamic-linker-tricks-using-ld\_preload-to-cheat-inject-features-and-investigate-programs
http://tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html
https://grugq.github.io/docs/subversiveld.pdf http://vxheaven.org/lib/vrn00.html
https://cwrap.org/ https://lwn.net/Articles/594863/ http://rr-project.org/
http://rr-project.org/rr.html http://deter-project.org/
How to w/r in dev/mem:
https://www.blackhat.com/presentations/bh-europe-09/Lineberry/BlackHat-Europe-2009-Lineberry-code-injection-via-dev-mem.pdf


** Contribution 


* Development
** Data Provenance

* Journal
** 1rst week March
*** Things done
- Lire les papiers de Chloé, Guillaume, Marion et les papiers cités par Chloé.
*** Blocking points and questions-
- Je n'arrive pas à comprendre qui s'éxecute, où et comment. Les applis tournent
 sur la machine hôte, seules les actions qui ont besoin d'interagir avec
  l'environnement (réseau car applications distribuées) sont envoyées dans le
  simulateur?
- Si on exécute les applications sur la machine hôte, dans ce cas en quoi ça permet
d'exécuter sur différentes machines avec des puissances de calcul différentes?
--> Benchmark et rejeu pour ce qui est calcul d'application et envoie ce temps
dans le simulateur qui ajuste en fonction de la plate-forme qu'il simule. Ce qui
fait une émulation simulation.  
--> 4 choses: COMM (temps de communication), SEB (temps calcul), obtenir le
temps,DNS (resolution de nom). Obtenir l'heure pas de transformation en AS
(perte de performance à cause des changements de contextes), LD_PRELOAD (combien
de temps depuis le dernier chronostrart/stop) cat /proc/self/maps pour voir les
différents segments mémoire de processus (vsyscall: memoire kernel mappe pour
avoir l'heure, emplacement des lib...)
*** Planned work 
*** DONE Lire code et le comprendre (relire le ld_preload_pthread)
*** DONE Faire tourner le programme actuel
*** DONE Les papiers dans /biblio/to_read

** 09.03.2015
*** Things done
- Lire les "proof of concept" et les comprendre
- Lire les codes de tests/apps (bon brain storming about socket functions)
- Fichiers server_poll et server_poll_multi fastidieux.
- Laissé de côté le fichier apps/chess_adavanced.c
*** Blocking points and questions
- un appel dans le fichier ldpreload_pthread/mdfpthread.c
- quand on fait un fork le parent ne s'attache pas au fils??? Il y a juste le
 fils qui fait un PTRACE_ME???  (revoir l'annexe de Guillaume)
- c'est quoi "tesh"?  
--> tesh, c'est le testing shell, l'outil qu'on a écrit
dans simgrid pour nos tests d'intégration. Je l'avais posé en sujet scolaire une
fois. http://webloria.loria.fr/~quinson/Teaching/RS/projet-test.pdf La version
dans simgrid est en perl de nos jours, mais y'a une version en C assez balèze
qui demeure. Le principal défaut de la version C est de ne pas être porté à
windows (forcément).
*** Planned work
- Relire send_client/server serverMultiClients.c
- Mettre au propre note et schéma
*** DONE Lire le code dans src

** 10-13.03.2015
*** Things done
- essayer de trouver par quel bout commencer à lire les fichiers contenu dans
src --> .h lus
- commencer à faire des liens entre les différents fichiers et structures
*** Blocking points and questions
*** Planned work
- lire les .c notamment sys_* et syscall_process
*** DONE Mettre les en-têtes de fichiers et commentaire, corriger le code si besoin (erreur ctrl C/V et commentaires)
- peupler les sys_* avec ctrl-X ctrl-V (suivre strace)
- remplacer le switch du syscall_process par un tableau de pointeurs de
  fonctions
- améliorer la testsuite avec un script diff entre les sorties simterpose et
  strace --> algorithme de diff wikipédia --> longuest common subsequence

** 16.03.2015
*** Things done
- lire sys_*
*** Blocking points
- où sont définies les macro MSG_* et les xbt_dynar_* 
--> /opt/simgrid/include
- à quoi sert le while de process_runner (simterpose.c) 
--> processus lancé via le ptrace on le bloque dès que quelque chose se produit via le
resume (pendant le resume fait ses calculs) si on en sort = AS à gérer
- à quoi servent les processus clonés et la fonction main_loop (simterpose.c)?
--> main_loop = process_runner quand on est dans un clone 
--> quand fork ou create on fait un clone en fait du coup c'est l'AS clone qui
    gère ça.
*** Planned work
- lire le fichier syscall_process.c et autres tools en .c

** 17-18-19.03.2015
*** Things done
-lecture en cours de syscall_process.c
*** Blocking points
- qu'est ce qu'une MSG task et à quoi ça sert 
--> voir 101 de SIMGRID
- pourquoi à l'entrée du syscall_write on ne fait rien si on est en
address_translation
--> toute la petite sauce a été faite dans le open déjà
- différence pipe_t et pipe_end_s
--> l'un est la sortie (pipe_end_s) pour savoir de quel côté on est et
    l'autre est le tube pour les données
- pourquoi on n'a pas de return à la sortie de chaque syscall dans le
  process_handle?
--> Certains AS sont bloquants et du temps doit s'écouler au niveau du
simulateur avant la sortie de l'AS

- pourquoi incrémenter le compteur de référence à la sortie du syscall_write,
  entree du syscall_write alors qu'il est déjà incrémenté dans le open et qu'on
  le décrémente ensuite??? Est-ce pour éviter de fermer un fd à 0 si on
  l'utilise ailleurs...
- traitement des pipe dans syscall_write et process_close_call = ????
- pourquoi le syscall_poll_pre ne fonctionne pas?
- que fait sys_build_select et pourquoi le syscall_select_pre renvoie une valeur
 de match alors que c'est l'AS noyau qui devrait renvoyer ça?
--> C'est tout du n'importe quoi
*** Planned work
- lire le code de strace
- read SIMGRID101
*** DONE réorganiser le switch de process_handle pour ne pas avoir chercher de bon ordre de lecture...
    
** 23-24.03.2015
*** Things done
- lire syscall_process.c (enfin)
- compilation de simterpose / correction d'un bug à la compilation
- exécution du code sur msg_clientserver.sh
*** Blocking points
- pourquoi à l'entrée de l'AS connect on fait appel à process_handle
--> WTF but it works...
- WTF le sleep(4) dans syscall_fcntl
- make diff-send erreur après exit
*** Planned work
*** DONE schéma du connect

** 25-26-27.03.2015
*** Things done
- Rédaction "pré-rapport" (template)
- Bibliographie
*** Blocking points
- clarifier cette histoire de /proc/id/mem
*** Planned work
*** DONE ne pas parler de communications mais d'actions
- compléter la partie émulation avec d'autres simulateurs ou test invalidés
- java -jar plantuml.jar -tpng fichier.pu
- CWRAP RR

** 30.03.2015 -> 03.04.2015
*** Things done
- Écriture Pré-rapport (Intro Virtualisation émulation, Mediation communications réseaux)
- Pictures
- Bibliography
*** Blocking points
- place de "temps d'un SEB (netlink et cap)" dans le 2.1
- pq pas systemtap et dyninst et strace, uprobes raison suffisante pour éviter ce choix, 
*** Planned work 
- Continuer la biblio

** 06.04.2015 -> 10.04.2015
*** Things done
- Écriture Pré-rapport (Introduction, Virtualisation standard, ptrace, Uprobes, seccomp-bpf)
- Biblio terminée
*** Planned work
- Finir seccomp-bpf

** 13.04.2015 -> 17.04.2015
*** Things done
- Écriture Pré-rapport (Valgrind, seccomp-bpf, new Uprobes, LD_PRELOAD)
*** Planned work
- Commencer partie SOTA

** 20.04.2015 -> 24.04.015
*** Things done
- Écriture Pré-rapport (cwrap, Distem, DETER, partie 4)
*** Planned work 
- Terminer SOTA

** 27.04.2015 -> 01.05.2015
*** Things done
- Écriture Pré-rapport (RR, Robot, MicroGrid, actions sur le source, got poisoning, del RR)
*** DONE Écrire la partie loria (présentation) projet SIMGRID Simterpose
*** DONE revoir uprobes
*** DONE outil du 2.1 à détailler
*** DONE reprendre les images
*** DONE trouver lien ptrace, transition et pourquoi besoin de ld_preload
*** DONE ne pas oublier de place le pq les syscalls et choix amd64 pour ptrace
*** DONE Intre de chaque parties et transitions
*** DONE schéma différences entre les virtualisations
*** DONE typo pour les citation, AS...
*** DONE Simgrid is not a simulator
*** DONE placer:
On parle de noeuds hétérogènes car les n\oe uds émulé ne possèdent pas le même nombre de c\oe urs ni la même fréquence. 
- parler des solutions qui n'existent plus?
impossible de predire et controller l'environnement avec des reseaux et machines partagées,empechant les expe reprouctibles
*** DONE schéma archi robot et DETER to modify at home 

** 04.05.2015 -> 07.05.2015
*** Things done
- Why a "Make *** [diff-send] Erreur 1" with "make diff-send" TODO (repeat du 24.03)
- Cleaning code (a .h for each .c)
*** Blocking points
- What is the meaning of 'SYSCALL_PROCESS_H' and when should we use it?
*** Planned work
*** DONE fix 'make *** [diff-send] Erreur 1'

** 11.05.2015 -> 15.05.2015
*** Things done
- Roll back cleaning of all include of each .c
- Compilation of Simterpose on the most recent version of SimGrid
*** Blocking points
*** Planned work
- Verify that the old tests still works on the new version of SimGrid
*** DONE Clean all the include .h in every .h because there are loops in there
*** DONE Done the previous TODO means to fix the compilation problem of communication.o sockets.o and simterpose.o, there are linked

** 18.05.2015 -> 22.05.2015
*** Things done
- The old poc works now with the new version of SimGrid
- Reduce the modification of code to switch the execution of Simterpose between two versions of SimGrid
- Clean the switch in syscall_handle (function calls )
*** Blocking points 
- It's cute to call MSG_process_create in sys_process.c to avoid a bug but this function has never been implemented in SimGrid (old or new version), there is just a prototype on msg.h ...
  - Answer Mt: that function exists, you must have missed it. 
- the end loop of simterpose_process_runner is near to the main_loop function, why should we keep the loop and not call the function?
  - Answer Mt: feel free to clean everything that you can
*** Planned work
- Clean the switch (comments and when we return or not and why some functions are void or int in return)
- Script diff
- FIXME and TODO commented in the code 
- Do we need the two ifdef in process_descriptor.c et .h
  - Answer Mt: I killed them

** 31.05.2015 [Mt]
*** Things done
- Kill compatibility with "old" simgrid (older than git head). The code is complex enough.
- Merge branches into master. We are alone here.
- Work on the "retcode=139" problem. That's a segfault in simterpose.
  - use printf in segfault handler instead of XBT logs (more robust so)
  - we can't run simterpose in valgrind because childs are still
    attached to valgrind after the fork (of course), and valgrind does
    strange things that we don't support yet, eg fcntl(DUPFD).
  - I think that the segfault (that is hard to see because valgrind is
    useless) is in communications.c. Definitely, we need to rewrite
    that file for a sane handling of the FD metadata.
- Thinking about the test suite.
  - Actually, testing the comparison to strace output seems very
    difficult to implement for little gain.
  - It would be better to use tesh(1) to ensure that the test
    applications always return exactly the same output (without tracing
    all the syscalls)
  - we would use the comparison to strace when improving the code, and
    enforcing the output (only) in regression tests.
*** DONE support fcntl(DUPFD) 
Also, do all the strange things that valgrind does when simterpose
forkes a new process in valgrind.
  
** 01.06.2015 -> 05.06.2015
*** Things done
- Update the version of SimGrid
- Work on the segfault of communication.c could come from:
  - Bad gestion of ref_count somewhere
  - Problem at the return of MSG_main in simterpose.c but I don't know why
  - Looking for this with gdb:
    - malloc cannot reach file:
      "2917 malloc.c: Aucun fichier ou dossier de ce type"
      ex: free(proc->name) (process_descriptor.c:79) 
    - close_all_communication (sockets.c: 369)
      - ref_count of fd at -1, and then disappeared replaced by 1
      - the loop doesn't work correctly, we loop between l:373 and 375 not 405
      - result never reallocated (stay at 0)
  - Looking for this with Valgrind:
    - process_fcntl_call (sys_memory.c:398): we try to reach the file descriptor
      indexed by arg but in the case of proc this file descriptor can be allocated
      at annother index than "arg->fd" in its list of file descriptor
    - try to replace all the wrong call and then an error:
      sys_memory.c:377 after i = 3 we cannot reach fd_list[i] and the segfault
- Reading Valgrind documentation to find which system calls
  have to be implemented   
- Test of the option " --cfg=contexts/factory:thread " during the execution
  of Simterpose.
- To have a good execution of SimGrid with Valgrind, you have to put on the cmake:
  - enable_compile_optimizations     OFF
  - enable_mallocators               ON
  - enable_model-checking            OFF
- Delete "TODO union pour les arguments de fcntl"
-> There are only two types of arguments (int and void), it is useless.
- Implemented option of fcntl F_DUPFD 
*** Blocking points
*** Planned work
- Maybe add a variable in process_descriptor to keep the size of the list of
  the file descriptor owned by a process. Because all the for loops are going
  from 0 to MAX_FD but fd_list is dynamic so it is possible that we continue
  on the loop till 1024 except there is few files
**** TODO check the initial value of refcount in F_DUPFD 
**** TODO be able to run simterpose with the option  --cfg=contexts/factory:thread

** 08.06.2015 -> 12.06.2015
*** Things done
- One file per syscall
- It seems it was useless to change the index of fd_list for file descriptors
- A file for the fcntl syscall (sys_memory.c began to be too long)
- Implemented options of fcntl:
  - F_DUPFD_OCLOEXEC
  - F_GETFD & F_SETFD
  - F_GETFL & F_SETFL
  - F_SETLK & F_SETLKW
- Using the right registers in ptrace_get_registers function according to
  the architecture
- Index all the flags for fcntl syscall in sys_fcntl.c and args_trace.c
- Find the root of the segfault: the main process of Simterpose sends datas
  to Simterpose that return a NILL pointer. And then we try to access this pointer
  -> segfault
*** Blocking points
- I don't really understand what is done in sys_write at the end
  (sys_write.c: 95 -> 103)
- Valgrind try to read or write in files that was never opened
  (proc->fd_list[arg->fd] = nil):
==5445== Invalid read of size 4
==5445==    at 0x414EC8: syscall_write (sys_memory.c:235)
- When we store the values of registers in ptrace_get_registers, we have
  "unsigned long" type in reg_s struct.
  But when we are in a syscall, for instance with file descriptors we make
  "file_desc->fd = reg->ret" fd is an "int" whereas ret is "unsigned long".
  Is it not dangerous to assign unsigned long of reg_s struct to a variable
  of type int?
- What is the register orig_rax?
  (ptrace_utils.c:200 pour 64bits & 211 pour 32bits)
- How handle the difference between access mode and status flags in our
  struct of file
*** Planned work
- modify the struct for file to make the difference between access mode
  and status flags maybe
**** TODO Complete all allocation of fd_descriptor with the new field (flags/mode/new flags of fcntl)
**** TODO Test of arhitecture in the Makefile after we had merge Gabriel's work
**** TODO Think about how the flags are managed actually ( &= |= or simple = ) and check | o_cloexec
**** TODO Read the link /dev/mem w/r

** 15.06.2015 -> 19.06.2015
*** Things done
- Add a mode field to open syscall structure and complete syscall_open()
- Add get_args_open function
- Replace all the "int" types in syscall structures by "unsigned long"
  (returned by ptrace_get_registers)
*** Blocking points
- two open syscall made by the same process with the same fd returned
- one open syscall with flags value to 2048
- one write sycall on a file that is not yet opened whereas the return value
  gave by the system is not an error
*** Planned work
**** DONE gérer les erreurs dans fcntl

** 29.06.2015 -> 03.07.2015
-*** Things done
- Execution with Valgrind without segfault
- Put unsigned long and cast of type int/long in the right place for each
  syscall structure
*** Blocking points
*** Planned work
- Is it usefull to have unsigned long in ptrace_restore_syscall
- Check:
  - Functions using reg_s structure that they use a cast for each field
    (reg-> or r->)
  - <0 and >0 with correct casts
  - %lu and %d
  - Sometimes ret lu -> l, or int (sys_open:37, sys_send:47)
  - execve struct ptr_arg ul -> l be careful (print_syscall.c)
  - select field timeout is a double whereas it should be a timeval struct
  - two first structures of syscall_data.h (trouble when we cast)
  - sort the argument in syscall structure
  - trouble with recvmsg when we change the type of return in reg->ret
  - socklen_t no need to cast
  - setsockopt getsockopt voir les champs
  - no syscall time
  - clone argument
  - clone and exec todo
- Erase the syscall structures and read directly in registers.

** 06.07.2015 -> 10.07.2015
*** Things done
- Delete the strucutres per syscall
*** Planned work
- Finish to delete those structures and insert the code provided by Gabriel
to avoid to read every time in registers.

** 13.07.2015 -> 17.07.2015
*** Things done
- Adding the use of reg_s structures instead of ptrage_get_register call for
  each syscall proceed last week
- getpeername, listen, pipe, fcntl syscalls done
*** Blocking points
- What is this call to ptrace_cpy and ptrace_poke in sys_getpeername:44, 80 and 81
- Does the reallocation of reg_s is enough to modify register because
  the SETREGS is done with reg_s struc or we have to make a SETREGS with ptrace
- To retrieve the value in register why a ptrace_cpy? x=reg->ret is not enough ?
- With msg_clientser: The poll syscall does not always finish its execution (sentence "End of
  simulation... does not appear). It works with Valgrind.
  -> Problem from my computer
- With send_clientserver: simulation ends only with Valgrind.
  -> Problem from my computer
*** Planned work
**** DONE Correct the geetpername system
- Finish the poll syscall bug maybe it's my computer. It's my computer.
- Check for a bug with ptrace getregs with another computer. Idem
**** DONE Rename pool files on poll files

** 20.07.2015 -> 24.07.2015
*** Things done
- shutdown, getsockopt, setsockopt, socket, select, read, write syscalls done
*** Blocking points
- ptrace_poke sys_read.c:122 ????
